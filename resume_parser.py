{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6b240e82-f759-4df1-8f18-441433c96cd1",
   "metadata": {},
   "source": [
    "This code\n",
    "Connects to Zoho Mail via IMAP (same as before).\n",
    "\n",
    "Reads only emails whose subject contains ‚ÄúResume‚Äù.\n",
    "\n",
    "Extracts Name, Email Address, Phone, Location, and Position Applied For from the email text body.\n",
    "\n",
    "Downloads PDF/DOC/DOCX attachments to a folder (Resumes).\n",
    "\n",
    "Reads the downloaded resume files and searches for skills keywords (from a list).\n",
    "\n",
    "Saves everything to an Excel file with the columns: Name | Email | Phone | Location | Position Applied For | Skills"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2bd77191-a553-461e-a19f-4d3aa7e33eba",
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install pandas openpyxl python-docx pdfplumber"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7994f824-1aa9-4c20-aaa4-601cde4d4134",
   "metadata": {},
   "outputs": [],
   "source": [
    "# --- Zoho Resume Parser: Email body + Resume Skills ---\n",
    "import imaplib\n",
    "import email\n",
    "from email.header import decode_header\n",
    "import os, re\n",
    "from io import BytesIO\n",
    "from pathlib import Path\n",
    "import pandas as pd\n",
    "import pdfplumber\n",
    "from docx import Document\n",
    "\n",
    "# -------------------------\n",
    "# CONFIGURATION - EDIT THESE\n",
    "# -------------------------\n",
    "IMAP_SERVER = \"imap.zoho.com\"\n",
    "IMAP_PORT = 993\n",
    "EMAIL_ACCOUNT = \"aparna.g@abhinavdcs.in\"   # <-- your Zoho email\n",
    "PASSWORD = \"your_app_password\"              # <-- your Zoho app password\n",
    "MAILBOX = \"INBOX\"\n",
    "SUBJECT_KEYWORD = \"Resume\"\n",
    "DOWNLOAD_FOLDER = \"Resumes\"\n",
    "OUTPUT_EXCEL = \"candidates.xlsx\"\n",
    "# -------------------------\n",
    "\n",
    "# Skill keywords to detect inside resumes\n",
    "SKILLS_KEYWORDS = [\n",
    "    \"python\", \"sql\", \"excel\", \"power bi\", \"tableau\", \"r\", \"pandas\",\n",
    "    \"numpy\", \"machine learning\", \"data analysis\", \"reporting\",\n",
    "    \"communication\", \"vba\", \"automation\", \"aws\", \"azure\", \"django\", \"flask\"\n",
    "]\n",
    "\n",
    "# Regular expressions to extract info from email body\n",
    "EMAIL_REGEX = re.compile(r\"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}\")\n",
    "PHONE_REGEX = re.compile(r\"(\\+?\\d{1,3}[-.\\s]?)?(\\d{6,15})\")\n",
    "NAME_REGEX = re.compile(r\"Name[:\\-\\s]+([A-Za-z\\s.]+)\", re.I)\n",
    "LOCATION_REGEX = re.compile(r\"Location[:\\-\\s]+([A-Za-z\\s,]+)\", re.I)\n",
    "POSITION_REGEX = re.compile(r\"(?:Position|Applied\\s*For|Role)[:\\-\\s]+([A-Za-z\\s/]+)\", re.I)\n",
    "\n",
    "# Create resume download folder\n",
    "os.makedirs(DOWNLOAD_FOLDER, exist_ok=True)\n",
    "\n",
    "def decode_mime_words(s):\n",
    "    if not s:\n",
    "        return \"\"\n",
    "    parts = decode_header(s)\n",
    "    decoded = ''\n",
    "    for part, enc in parts:\n",
    "        if isinstance(part, bytes):\n",
    "            decoded += part.decode(enc or 'utf-8', errors='ignore')\n",
    "        else:\n",
    "            decoded += part\n",
    "    return decoded\n",
    "\n",
    "def extract_text_from_pdf_bytes(b: bytes) -> str:\n",
    "    text = \"\"\n",
    "    try:\n",
    "        with pdfplumber.open(BytesIO(b)) as pdf:\n",
    "            for page in pdf.pages:\n",
    "                page_text = page.extract_text()\n",
    "                if page_text:\n",
    "                    text += page_text + \"\\n\"\n",
    "    except Exception:\n",
    "        pass\n",
    "    return text\n",
    "\n",
    "def extract_text_from_docx_bytes(b: bytes) -> str:\n",
    "    text = \"\"\n",
    "    try:\n",
    "        doc = Document(BytesIO(b))\n",
    "        for para in doc.paragraphs:\n",
    "            text += para.text + \"\\n\"\n",
    "    except Exception:\n",
    "        pass\n",
    "    return text\n",
    "\n",
    "def extract_from_email_body(body: str):\n",
    "    \"\"\"Extract Name, Email, Phone, Location, Position from email body.\"\"\"\n",
    "    name = NAME_REGEX.search(body)\n",
    "    email_match = EMAIL_REGEX.search(body)\n",
    "    phone = PHONE_REGEX.search(body)\n",
    "    loc = LOCATION_REGEX.search(body)\n",
    "    pos = POSITION_REGEX.search(body)\n",
    "\n",
    "    return {\n",
    "        \"Name\": name.group(1).strip() if name else \"\",\n",
    "        \"Email\": email_match.group(0).strip() if email_match else \"\",\n",
    "        \"Phone\": phone.group(0).strip() if phone else \"\",\n",
    "        \"Location\": loc.group(1).strip() if loc else \"\",\n",
    "        \"Position Applied For\": pos.group(1).strip() if pos else \"\",\n",
    "    }\n",
    "\n",
    "def extract_skills_from_resume_text(text: str):\n",
    "    \"\"\"Search for predefined skill keywords in resume text.\"\"\"\n",
    "    found = [kw for kw in SKILLS_KEYWORDS if re.search(r'\\b' + re.escape(kw) + r'\\b', text.lower())]\n",
    "    return \", \".join(sorted(set(found)))\n",
    "\n",
    "def process_mailbox():\n",
    "    print(\"üîó Connecting to Zoho IMAP...\")\n",
    "    mail = imaplib.IMAP4_SSL(IMAP_SERVER, IMAP_PORT)\n",
    "    mail.login(EMAIL_ACCOUNT, PASSWORD)\n",
    "    mail.select(MAILBOX)\n",
    "\n",
    "    status, data = mail.search(None, f'(SUBJECT \"{SUBJECT_KEYWORD}\")')\n",
    "    msg_ids = data[0].split()\n",
    "    print(f\"üì® Found {len(msg_ids)} email(s) with subject containing '{SUBJECT_KEYWORD}'\")\n",
    "\n",
    "    results = []\n",
    "\n",
    "    for num in msg_ids:\n",
    "        status, msg_data = mail.fetch(num, \"(RFC822)\")\n",
    "        msg = email.message_from_bytes(msg_data[0][1])\n",
    "        subject = decode_mime_words(msg.get(\"Subject\", \"\"))\n",
    "        sender = decode_mime_words(msg.get(\"From\", \"\"))\n",
    "        body_text = \"\"\n",
    "        resume_text_combined = \"\"\n",
    "\n",
    "        # --- Extract plain text + fallback HTML body ---\n",
    "        for part in msg.walk():\n",
    "            ctype = part.get_content_type()\n",
    "            disp = str(part.get_content_disposition() or \"\")\n",
    "            if ctype == \"text/plain\" and disp != \"attachment\":\n",
    "                try:\n",
    "                    body_text += part.get_payload(decode=True).decode(part.get_content_charset() or \"utf-8\", errors=\"ignore\")\n",
    "                except Exception:\n",
    "                    pass\n",
    "            elif ctype == \"text/html\" and disp != \"attachment\" and not body_text.strip():\n",
    "                try:\n",
    "                    html = part.get_payload(decode=True).decode(part.get_content_charset() or \"utf-8\", errors=\"ignore\")\n",
    "                    # Remove HTML tags\n",
    "                    body_text += re.sub('<[^<]+?>', ' ', html)\n",
    "                except Exception:\n",
    "                    pass\n",
    "\n",
    "        # --- Parse info from email body ---\n",
    "        candidate = extract_from_email_body(body_text)\n",
    "\n",
    "        attachments_saved = []\n",
    "\n",
    "        # --- Download resumes and read text for skills ---\n",
    "        for part in msg.walk():\n",
    "            filename = part.get_filename()\n",
    "            if filename:\n",
    "                filename = decode_mime_words(filename)\n",
    "                if filename.lower().endswith((\".pdf\", \".doc\", \".docx\")):\n",
    "                    payload = part.get_payload(decode=True)\n",
    "                    save_path = Path(DOWNLOAD_FOLDER) / filename\n",
    "                    with open(save_path, \"wb\") as f:\n",
    "                        f.write(payload)\n",
    "                    attachments_saved.append(str(save_path))\n",
    "                    print(f\"üíæ Saved attachment: {filename}\")\n",
    "\n",
    "                    if filename.lower().endswith(\".pdf\"):\n",
    "                        resume_text_combined += extract_text_from_pdf_bytes(payload)\n",
    "                    else:\n",
    "                        resume_text_combined += extract_text_from_docx_bytes(payload)\n",
    "\n",
    "        # --- Extract skills from resumes ---\n",
    "        candidate[\"Skills\"] = extract_skills_from_resume_text(resume_text_combined)\n",
    "        results.append(candidate)\n",
    "\n",
    "    mail.close()\n",
    "    mail.logout()\n",
    "\n",
    "    df = pd.DataFrame(results, columns=[\"Name\",\"Email\",\"Phone\",\"Location\",\"Position Applied For\",\"Skills\"])\n",
    "    df.to_excel(OUTPUT_EXCEL, index=False)\n",
    "    print(f\"\\n‚úÖ Saved {len(results)} records to {OUTPUT_EXCEL}\")\n",
    "    print(f\"üìÇ Resumes downloaded in folder: {os.path.abspath(DOWNLOAD_FOLDER)}\")\n",
    "\n",
    "# Run it\n",
    "process_mailbox()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3df7c23d-b90f-45a8-be9a-3fe8727b5a5e",
   "metadata": {},
   "source": [
    "You should see output like this \n",
    "\n",
    "üîó Connecting to Zoho IMAP...\n",
    "üì® Found 6 email(s) with subject containing 'Resume'\n",
    "üíæ Saved attachment: John_Doe_Resume.pdf\n",
    "‚úÖ Saved 6 records to candidates.xlsx\n",
    "üìÇ Resumes downloaded in folder: C:\\Users\\YourName\\Resumes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "341b0753-0f19-492e-93f5-ef26034ed5cf",
   "metadata": {},
   "source": [
    "Check your outputs\n",
    "\n",
    "In the same folder as your notebook, you‚Äôll now have:\n",
    "\n",
    "A folder named Resumes ‚Üí with all resume attachments downloaded.\n",
    "\n",
    "A file named candidates.xlsx ‚Üí with 6 columns:"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
